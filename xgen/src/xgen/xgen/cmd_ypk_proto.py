#! /usr/bin/python
#

from xgen.util import *
from xgen.yxsd import *
import glob
import os
from jinja2 import Environment, DictLoader

# 2.7
# reload(sys)
#import sys
# sys.setdefaultencoding('utf-8')

import logging
logger = logging.getLogger(__name__)


class YPKGenProto(object):
    def __init__(self, xsdDir, inBundle):
        self.mMods = {}
        self.mXsdDir = xsdDir
        self.m_bundle = inBundle
        self.initenv()

    def initenv(self):
        mytemplates = {
            "proto": PROTO_TEMPLATE,
            "ypk": PROTO_YPKTEMPLATE
        }
        self.mEnv = Environment(loader=DictLoader(
            mytemplates), trim_blocks=True, lstrip_blocks=True)
        self.mEnv.filters["pbname"] = pbname

    def run(self, inDir):
        if os.path.exists(inDir) is False:
            os.mkdir(inDir)

        with open(inDir + "/" + "ypk.proto", 'w') as f:
            ypk_output = self.mEnv.get_template('ypk').render()
            f.write(ypk_output)

        path = self.mXsdDir + '/*.xsd'
        for xsd in glob.glob(path):
            logger.debug("begin process[proto] %s", xsd)
            mod = YModule(xsd)
            mod.parse()
            modname = mod.m_modname

            outfile = inDir + "/" + pbname(modname) + ".proto"
            logger.info("generate %s", outfile)
            with open(outfile, 'w') as f:
                output = self.mEnv.get_template('proto').render(
                    ymod=mod, ybundle=self.m_bundle)
                f.write(output)


cmddescription = 'generate proto from dev yxsd model'


def makeoptions(optparser):
    optparser.add_argument(
        "--bundle",
        type=str,
        help="specify yang bundle")
    pass


def run(options):
    cmd = YPKGenProto(options.input, options.bundle)
    cmd.run(options.output)


PROTO_TEMPLATE = """
{% set modpbname = ymod.m_modname | pbname %}
{% set modpbtype = ymod.m_modtype | pbname %}

//auto generated by xgen toolkit, bug mail to zengmao@fiberhome.com
syntax = "proto2";

import "ypk.proto";

package {{ybundle}}PB.{{modpbname}};


{% for name,complextype in ymod.m_complex_type_dict|dictsort %}
{% set ns = namespace(index = 2048) %}
message {{complextype.m_name_pb}}
{
  {% for field in complextype.m_fields %}
    {% if field.m_key != -1 %}
    {{field.m_pboption}} {{field.m_pbtype}} {{field.m_pbname}} = {{field.m_field_index}}[(YPKPB.ykey)=1];
    {% elif field.m_nodeopr%}
    {{field.m_pboption}} {{field.m_pbtype}} {{field.m_pbname}} = {{field.m_field_index}}[(YPKPB.ynodeopr)=true];
    {% else %}
    {{field.m_pboption}} {{field.m_pbtype}} {{field.m_pbname}} = {{field.m_field_index}};
    {% endif %}
  {% endfor %}
  {% if complextype.m_fields_key %}
    {% set ns.index = ns.index + 1 %}
    optional int32 listopr = {{ns.index}} [default = 0];
  {% endif %}
  {% for field in complextype.m_fields %}
    {% if field.m_nodeopr%}
    {% set ns.index = ns.index + 1 %}
    optional int32 {{field.m_nodeopr}} = {{ns.index}} [default = 0];
    {% endif %}
  {% endfor %}
}

{% endfor %}

{%for name, rpc in ymod.m_rpcs | dictsort%}
{%  if not rpc.m_input %}
message {{rpc.m_name|pbname}}
{
}
{%  endif %}

{%endfor%}
"""

PROTO_YPKTEMPLATE = """
syntax = "proto2";

import "google/protobuf/descriptor.proto";

package YPKPB;

extend google.protobuf.FieldOptions {
  optional int32 ykey = 10001[default=0];
  optional bool ynodeopr = 10002[default=false];

}
"""
